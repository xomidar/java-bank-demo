plugins {
    id "com.gorylenko.gradle-git-properties" version "${gitPropertiesPluginVersion}"
    id "com.diffplug.spotless" version "${spotlessVersion}" apply false
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'java'
}

apply plugin: 'io.spring.dependency-management'

if (!hasProperty('buildProfile')) ext.buildProfile = 'dev'

if (file("gradle/profile-${buildProfile}.gradle").exists()) {
    apply from: "gradle/profile-${buildProfile}.gradle"
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11
assert System.properties["java.specification.version"] == JavaVersion.VERSION_11 || JavaVersion.VERSION_12 || JavaVersion.VERSION_13 || JavaVersion.VERSION_14

repositories {
    mavenCentral()
}

dependencies {
    implementation enforcedPlatform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation "org.projectlombok:lombok"
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"

    compileOnly "io.springfox:springfox-boot-starter:${openApiVersion}"

    annotationProcessor "org.projectlombok:lombok"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testAnnotationProcessor "org.projectlombok:lombok"
}

test {
    useJUnitPlatform()
}

gitProperties {
    failOnNoGitDirectory = false
}

springBoot {
    buildInfo {
        properties {
            name = projectName
        }
    }
}

processResources {
    filesMatching("application.yml") {
        filter {
            it.replace("#spring.profiles.active#", buildProfile)
        }
    }
}

wrapper.gradleVersion = gradleVersion
